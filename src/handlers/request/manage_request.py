from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton

from src.common.states import ManageRequestState, AppState
from src.common import keyboard as kb
from src.database.models import crud
from src.database.models.request import SendRequest
from src.database import db

from src.services import sheets
from src.bot import bot
from src.handlers import menu


router = Router()


@router.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
@router.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫")
async def request_status(message: Message, state: FSMContext):
    requests = crud.get_request_by_tg_id(db, message.from_user.id)
    
    if not requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    sent_message_ids = []
    
    for request in requests:
        send = isinstance(request, SendRequest)
        
        text = "üì¶<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞</b>\n" if send else "üì¶<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ (–ü–æ—Å—ã–ª–∫–∏)</b>\n"

        status = '–ê–∫—Ç–∏–≤–Ω–∞' if request.status == 'open' else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
        text += f'üìå–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {request.id}\nüõé–°—Ç–∞—Ç—É—Å: <b>{status}</b>\nüõ´–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{request.from_location}</b>\nüõ´–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{request.to_location}</b>'
        
        from_date = request.from_date.strftime('%d.%m.%Y')
        to_date = request.to_date.strftime('%d.%m.%Y')
        text += f"\nüóì–î–∞—Ç—ã: <b>{from_date} - {to_date}</b>\nüìä–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—ã–ª–∫–∏: <b>{request.size_type}</b>"
        
        if send:
            text += f"\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>{request.description}</b>"
        

        sent_message = await message.answer(text, reply_markup=kb.create_close_req_button('send' if send else 'delivery', request.id), parse_mode='HTML')
        
        sent_message_ids.append(sent_message.message_id)

    await state.update_data(sent_messages_for_close_req=sent_message_ids)


@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def close_request(message: Message, state: FSMContext):
    await request_status(message, state)

from .callbacks import RequestCallback, Action, User

@router.callback_query(RequestCallback.filter(F.user == User.sender), RequestCallback.filter(F.action == Action.accept))
async def accept_request_from_sender_kb(callback: CallbackQuery, callback_data: RequestCallback):
    
    
    await callback.message.delete()
    
    sender_user_tg_id = callback.from_user.id
    sender_user = crud.get_user_by_tg_id(db, sender_user_tg_id)
    sender_contact_info = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n"
    if sender_user.name:
        sender_contact_info += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∏–º—è: {sender_user.name}\n"
    if sender_user.phone:
        sender_contact_info += f"–¢–µ–ª–µ—Ñ–æ–Ω: {sender_user.phone}\n"
    if sender_user.telegram_user.username:
        sender_contact_info += f"Telegram: @{sender_user.telegram_user.username} "
    if sender_user.telegram_user.telegram:
        sender_contact_info += f"(ID: {sender_user.telegram_user.telegram})"
    
    delivery_user_id = callback_data.delivering_user_id
    delivery_user = crud.get_user_by_id(db, delivery_user_id)
    
    crud.close_delivery_request(db, callback_data.delivery_request_id)
    sheets.record_close_deliver_req(callback_data.delivery_request_id)
    reply_markup = kb.create_main_menu_markup(callback.from_user.id)
    
    await bot.send_message(delivery_user.telegram_user.telegram, f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n{sender_contact_info}')
    await bot.send_message(delivery_user.telegram_user.telegram, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=reply_markup)
    
    delivery_user_contact_info = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫—É—Ä—å–µ—Ä–∞:\n"
    if delivery_user.name:
        delivery_user_contact_info += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∏–º—è: {delivery_user.name}\n"
    if delivery_user.phone:
        delivery_user_contact_info += f"–¢–µ–ª–µ—Ñ–æ–Ω: {delivery_user.phone}\n"
    if delivery_user.telegram_user.username:
        delivery_user_contact_info += f"Telegram: @{delivery_user.telegram_user.username} "
    if delivery_user.telegram_user.telegram:
        delivery_user_contact_info += f"(ID: {delivery_user.telegram_user.telegram})"
    crud.close_send_request(db, callback_data.send_request_id)
    sheets.record_close_send_req(callback_data.send_request_id)
    reply_markup = kb.create_main_menu_markup(callback.from_user.id)
    await callback.message.answer(f'–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—É—Ä—å–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n{delivery_user_contact_info}')
    await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=reply_markup)

@router.callback_query(RequestCallback.filter(F.user == User.sender), RequestCallback.filter(F.action == Action.reject))
async def reject_request_from_sender_kb(callback: CallbackQuery, callback_data: RequestCallback, state: FSMContext):    
    
    await callback.message.answer('–ñ–∞–ª—å! –í–∏–¥–∏–º–æ, –∫—É—Ä—å–µ—Ä –Ω–µ –ø–æ–¥–æ—à–µ–ª –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –¢–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫?', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–î–∞')], [KeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É')]], resize_keyboard=True))
    await callback.message.delete()
    await state.update_data(reject_request_user_type='sender')
    await state.update_data(callback_data=callback_data.to_dict())
    await state.set_state(ManageRequestState.ask_to_continue)
    
@router.message(ManageRequestState.ask_to_continue, F.text.lower() == '–¥–∞')
async def handle_continue_search(message: Message, state: FSMContext):
    state_data = await state.get_data()
    callback_data = state_data.get('callback_data')
    reject_request_user_type = state_data.get('reject_request_user_type')
    
    
    if reject_request_user_type == 'sender':
        send_req_id = callback_data['send_request_id']
        req = crud.get_send_request_by_id(db, send_req_id)
        text += "\n<b>üì¶–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ (–ü–æ—Å—ã–ª–∫–∏)</b>"
    elif reject_request_user_type == 'delivery':
        delivery_req_id = callback_data['delivery_request_id']
        req = crud.get_delivery_request_by_id(db, delivery_req_id)
        text += "\n<b>üì¶–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞</b>"
    
    text += f"\nüìå–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:<b>{req.id}</b>"
    text += f"\nüõé–°—Ç–∞—Ç—É—Å: <b>{req.status}</b>"
    text += f"\nüõ´–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{req.from_location}</b>"
    text += f"\nüõ´–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{req.to_location}</b>"
    text += f"\nüóì–î–∞—Ç—ã: <b>{req.from_date.strftime('%d.%m.%Y')} - {req.to_date.strftime('%d.%m.%Y')}</b>"
    text += f"\nüìä–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{req.size_type}</b>"
    if req.description != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        text += f"\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>{req.description}</b>"
    else:
        text += f"\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>–ù–µ—Ç—É</b>"
    
    await message.answer(f'–ü–æ–Ω—è–ª! –¢–æ–≥–¥–∞ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π. –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:{text}', reply_markup=kb.create_main_menu_markup(message.from_user.id), parse_mode='HTML')
    await state.set_state(AppState.menu)

@router.message(ManageRequestState.ask_to_continue, F.text.lower() == '–∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É')
async def handle_close_request(message: Message, state: FSMContext):
    state_data = await state.get_data()
    callback_data = state_data.get('callback_data')
    reject_request_user_type = state_data.get('reject_request_user_type')
    
    if reject_request_user_type == 'sender':
        send_req_id = callback_data['send_request_id']
        crud.close_send_request(db, send_req_id)
        sheets.record_close_send_req(send_req_id)
        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=kb.create_main_menu_markup(message.from_user.id))
    elif reject_request_user_type == 'delivery':
        delivery_req_id = callback_data['delivery_request_id']
        crud.close_delivery_request(db, delivery_req_id)
        sheets.record_close_deliver_req(delivery_req_id)
        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=kb.create_main_menu_markup(message.from_user.id))
    else:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏')
        return
    await state.set_state(AppState.menu)

@router.callback_query(RequestCallback.filter(F.user == User.delivery), RequestCallback.filter(F.action == Action.accept))
async def accept_request_from_delivery_kb(callback: CallbackQuery, callback_data: RequestCallback):
    
    await callback.message.delete()
    
    reply_markup = kb.create_main_menu_markup(callback.from_user.id)
    
    
    send_req_id = callback_data.send_request_id
    send_req = crud.get_send_request_by_id(db, send_req_id)
    
    # Check if sending request is still open
    if send_req.status != 'open':
        await callback.message.delete()
        await callback.message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.')
        return
    
    # Request is open, proceed with matching
    tg_id_of_send_req = send_req.user.telegram_user.telegram
    delivery_user = crud.get_user_by_id(db, callback_data.delivering_user_id)
    
    delivery_req_id = callback_data.delivery_request_id
    delivery_req = crud.get_delivery_request_by_id(db, delivery_req_id)
    
    delivery_guy_info = f"üõ´<b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {delivery_req.from_location}\nüõ´<b>–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {delivery_req.to_location}\nüóì<b>–î–∞—Ç—ã:</b> {delivery_req.from_date.strftime('%d.%m.%Y')} - {delivery_req.to_date.strftime('%d.%m.%Y')}\nüìä<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—ã–ª–∫–∏:</b> {delivery_req.size_type}"
    
    if delivery_req.description != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        delivery_guy_info += f"\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {delivery_req.description}"
    else:
        delivery_guy_info += f"\nüìú<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> –ù–µ—Ç—É"
    
    await bot.send_message(tg_id_of_send_req, f'<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ ‚Ññ{send_req_id} –Ω–∞–π–¥–µ–Ω –∫—É—Ä—å–µ—Ä.</b>\n–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ: ', reply_markup=kb.create_accept_buttons_for_sender(send_req_id, callback_data.delivery_request_id, send_req.user_id, delivery_user.id), parse_mode='HTML')    
    
    await callback.message.answer('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é. –û–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.', reply_markup=reply_markup)
    await callback.answer()
    

@router.callback_query(RequestCallback.filter(F.user == User.delivery), RequestCallback.filter(F.action == Action.reject))
async def reject_request_from_delivery_kb(callback: CallbackQuery, callback_data: RequestCallback, state: FSMContext):    
    
    await callback.message.answer('–ñ–∞–ª—å! –í–∏–¥–∏–º–æ, –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–¥–æ—à–µ–ª –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –¢–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫?', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–î–∞')], [KeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É')]], resize_keyboard=True))
    await callback.message.delete()

    await state.update_data(reject_request_user_type='delivery')
    await state.update_data(callback_data=callback_data.to_dict())
    await state.set_state(ManageRequestState.ask_to_continue)
    
    
@router.callback_query(F.data.startswith('close_req'))
async def close_request_kb(callback: CallbackQuery, state: FSMContext):
    
    
    req_data = callback.data.split(':')[1:]
    req_id = int(req_data[1])
    req_type = req_data[0]
    await callback.answer()
    if req_type == 'send':
        crud.close_send_request(db, req_id)
        sheets.record_close_send_req(req_id)
    elif req_type == 'delivery': 
        crud.close_delivery_request(db, req_id)
        sheets.record_close_deliver_req(req_id)
    else:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏')
        return
    
    req_type_text = '–æ—Ç–ø—Ä–∞–≤–∫—É' if req_type == 'send' else '–¥–æ—Å—Ç–∞–≤–∫—É'
    
    
    state_data = await state.get_data()
    msgs_to_delete = state_data.get('sent_messages_for_close_req', [])
    for msg_id in msgs_to_delete:    
        await bot.delete_message(callback.from_user.id, msg_id)
    
    await callback.message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ {req_type_text} –ø–æ –Ω–æ–º–µ—Ä—É {req_id} –∑–∞–∫—Ä—ã—Ç–∞.')
    await menu.handle_menu(callback.message, state)
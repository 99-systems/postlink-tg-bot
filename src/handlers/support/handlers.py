from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram import F

from src.database import db
from src.database.models import crud
from src.database.models.request import SendRequest
from src.common.states import SupportState
from src.handlers import menu
from src.services import supp_request_sender as supp_serv


from src.common import keyboard as kb
from src.handlers.support import router
from .filters import KnownProblemFilter


@router.message(SupportState.user_type, F.text.lower().in_(['–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–∫—É—Ä—å–µ—Ä', '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']))
async def handle_user_type(message: Message, state: FSMContext):
    await state.update_data(user_type=message.text.lower())
    await message.answer('–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?‚¨áÔ∏è', reply_markup=kb.support_problems_reply_mu)
    await state.set_state(SupportState.problem)
    
@router.message(SupportState.problem, KnownProblemFilter())
async def handle_known_problem(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –ø—Ä–æ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É.', reply_markup=ReplyKeyboardRemove())
    await state.set_state(SupportState.problem_description)
    
@router.message(SupportState.problem)
async def handle_unknown_problem(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.', reply_markup=kb.support_problems_reply_mu)
    
@router.message(SupportState.user_type, F.text.lower() == '–Ω–∞–∑–∞–¥')
async def back_to_menu(message: Message, state: FSMContext):
    await menu.handle_menu(message, state)

@router.message(SupportState.problem_description)
async def handle_other_problem_description(message: Message, state: FSMContext):
    await state.update_data(problem_description=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞\n(–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏)', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –∑–∞—è–≤–æ–∫')]], resize_keyboard=True))
    await state.set_state(SupportState.request_no)
    

@router.message(SupportState.request_no, F.text.func(str.isdigit))
async def handle_request_no(message: Message, state: FSMContext):
    await state.update_data(request_no=message.text)
    
    state_data = await state.get_data()
    user_type = state_data['user_type']
    request_data = None
    
    if user_type == '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å':
        request_data = crud.get_send_request_by_id(db, message.text)
    else:
        request_data = crud.get_delivery_request_by_id(db, message.text)
        
    if not request_data:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.', reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –∑–∞—è–≤–æ–∫')]], resize_keyboard=True))
        return
    
    type_of_request = 'send' if isinstance(request_data, SendRequest) else 'delivery'
    
    text = f'''–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ?'''
    text += f'\n\nüì¶<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞</b>\n' if type_of_request == 'send' else f'\n\nüì¶<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ (–ü–æ—Å—ã–ª–∫–∏)</b>\n'
    text += f'üìå–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {request_data.id}\nüõé–°—Ç–∞—Ç—É—Å: <b>{request_data.status}</b>\nüõ´–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{request_data.from_location}</b>\nüõ´–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{request_data.to_location}</b>'
    text += f'\nüóì–î–∞—Ç—ã: <b>{request_data.from_date.strftime("%d.%m.%Y")} - {request_data.to_date.strftime("%d.%m.%Y")}</b>\nüìä–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{request_data.size_type}</b>'
    if request_data.description != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        text += f'\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>{request_data.description}</b>'
    else:
        text += f'\nüìú–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>–ù–µ—Ç—É</b>'
    await message.answer(text, reply_markup=kb.confirmation_reply_mu, parse_mode='HTML')
    await state.set_state(SupportState.confirmation)
    
@router.message(SupportState.request_no, F.text.lower() == '–ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –∑–∞—è–≤–æ–∫')
async def handle_no_request_related_problem(message: Message, state: FSMContext):
    await state.update_data(request_no=None)
    await handle_confirmation(message, state)

@router.message(SupportState.request_no)
async def handle_invalid_request_no(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
    
@router.message(SupportState.confirmation, F.text.lower().in_(['–¥–∞', '–Ω–µ—Ç']))
async def handle_confirmation(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–ü—Ä–æ—à—É –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.', reply_markup=ReplyKeyboardRemove())
        await state.set_state(SupportState.request_no)
        return
    
    state_data = await state.get_data()
    
    support_request = crud.create_supp_request(db, message.from_user.id, state_data['problem_description'], state_data['user_type'], state_data['request_no'])
    await supp_serv.send_supp_request(support_request)
    
    await message.answer('‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    await menu.handle_menu(message, state)
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command, or_f, StateFilter
from aiogram.types import Message, ReplyKeyboardRemove

from src.common.states import RegistrationState
import src.context as context


from src.common.states import AppState, RegistrationState, LoginState
from src.common import keyboard as kb

from src.database.models import crud
from src.database.connection import db
from src.handlers.menu import menu

router = Router()

# TODO: –û—à–∏–±–∫–∞ —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM



@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(AppState.initial)
    await message.answer('''
üì¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [Postlink]! üì¶
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –ø–æ—Å—ã–ª–æ–∫.

üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
 
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—Å—ã–ª–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–º. 

2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–π—Å –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –æ –ø–µ—Ä–µ–¥–∞—á–µ. 

3Ô∏è‚É£ –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ, –∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.


‚ö† –í–∞–∂–Ω–æ!

-–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.

-–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∞–º–∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –æ–± –æ–ø–ª–∞—Ç–µ.
                         
-–ë–æ—Ç –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å—ã–ª–∫–∏ –∏ —Å–ø–æ—Ä—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.


üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ "start" –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É!
''', reply_markup=kb.start_reply_mu)

async def after_auth(message: Message, state: FSMContext):
    await state.set_state(AppState.menu)
    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å')
    await menu(message, state)

@router.message(AppState.initial, or_f(F.text.lower() == '–ª–æ–≥–∏–Ω', Command('login')))
async def login(message: Message, state: FSMContext):
    await state.set_state(LoginState.phone)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.phone_reply_mu)

    
@router.message(LoginState.phone)
async def handle_phone(message: Message, state: FSMContext):
    
    if not message.contact:
        await message.reply('–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à —Å–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?', reply_markup=kb.phone_reply_mu)
        return
    
    user_phone = message.contact.phone_number
    
    if not user_phone.startswith('+'):
        user_phone = '+' + user_phone
    
    await state.update_data(phone=user_phone)
    
    user = crud.get_user_by_phone(db, user_phone)
    if not user:
        await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        await state.set_state({}) 
        await back_to_start(message, state)
        return
    
    response = await context.otp_service.send_otp(user_phone)
    if 'message' in response:
        await message.reply('–°–æ–æ–±—â–∏—Ç–µ 6 –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º –Ω–∞ WhatsApp: ' + user_phone, reply_markup=ReplyKeyboardRemove())
        await state.update_data(phone=user_phone)
        await state.set_state(LoginState.otp_code)
    else:
        await message.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(LoginState.phone)
        return

@router.message(LoginState.otp_code, F.text.len() != 6)
async def handle_invalid_otp_code(message: Message, state: FSMContext):
    await message.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ 6 –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.set_state(LoginState.otp_code)

@router.message(LoginState.otp_code, F.text.len() == 6, F.text.func(str.isdigit))
async def handle_otp_code(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')

    response = await context.otp_service.verify_otp(phone, message.text)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    error_messages = {
        'OTP has expired. Please request a new one.': (LoginState.phone, '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥'),
        'OTP has already been used.': (LoginState.phone, '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥'),
        'Invalid OTP or phone number.': (LoginState.otp_code, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'),
    }

    if 'detail' in response:
        state_target, error_msg = error_messages.get(response['detail'], (LoginState.phone, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞'))
        await message.reply(error_msg)
        await state.set_state(state_target)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP
    if response.get('message') == 'OTP verified successfully':
        user = crud.get_user_by_phone(db, phone)
        crud.add_user_telegram(db, user.id, message.from_user.id, message.from_user.username)
        
        await state.clear()
        await after_auth(message, state)
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@router.message(AppState.initial, or_f(F.text.lower() == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', Command('register')))   
async def registration(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.name)
    await message.reply('–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?', reply_markup=kb.auth_back_reply_mu)

@router.message(StateFilter(RegistrationState), F.text == '–ù–∞–∑–∞–¥')
async def back_to_start(message: Message, state: FSMContext):
    await state.set_state({})
    await state.set_state(AppState.initial)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏–∂–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=kb.start_reply_mu)


@router.message(RegistrationState.name)
@router.message(RegistrationState.city_confirmation, F.text.lower() == '–Ω–µ—Ç')
async def handle_name(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.city)

    if message.text.lower() == '–Ω–µ—Ç':
        data = await state.get_data()
        await state.update_data(try_count=data.get('try_count', 0) + 1)

    data = await state.get_data()
    name = data.get('name', message.text)
    await state.update_data(name=name)

    text = f'{name}, –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?'

    if('try_count' in data):
        text += '\n–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É —Å –≥–æ—Ä–æ–¥–æ–º.\n–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê–ª–º–∞—Ç—ã'
    await message.answer(text, reply_markup=kb.auth_back_reply_mu)
    
@router.message(RegistrationState.city)
async def handle_city(message: Message, state: FSMContext):
    
    service_response = await context.places_api.search_text(message.text)
    
    place = None
    
    if 'places' in service_response:
        place = service_response['places'][0]
    
    if place:
        await state.set_state(RegistrationState.city_confirmation)
        await message.answer(f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ—Ä–æ–¥–µ: {place["formattedAddress"]}?', reply_markup=kb.city_conf_reply_mu)    
        await state.update_data(city=place["formattedAddress"])
    else:
        data = await state.get_data()
        await state.update_data(try_count=data.get('try_count', 0) + 1)

        await message.answer('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

    
@router.message(RegistrationState.city_confirmation, F.text.lower() == '–¥–∞')
async def handle_city_confirmation(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.phone)
    await message.answer('–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à —Å–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?', reply_markup=kb.phone_reply_mu)
    
    
@router.message(RegistrationState.phone)
async def handle_phone(message: Message, state: FSMContext):
    
    if not message.contact:
        await message.reply('–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à —Å–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?', reply_markup=kb.phone_reply_mu)
        return
    
    user_phone = message.contact.phone_number
    
    if not user_phone.startswith('+'):
        user_phone = '+' + user_phone
    
    await state.update_data(phone=user_phone)
        
    if crud.is_user_phone_exists(db, user_phone):
        await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏')
        await state.set_state({})
        await back_to_start(message, state)
        return
    
    # Sending OTP
    response = await context.otp_service.send_otp(user_phone)
    if 'message' in response:
        await message.reply('–°–æ–æ–±—â–∏—Ç–µ 6 –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º –Ω–∞ WhatsApp: ' + user_phone, reply_markup=ReplyKeyboardRemove())
        await state.update_data(phone=user_phone)
        await state.set_state(RegistrationState.otp_code)
    else:
        await message.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(RegistrationState.phone)
        return
    
@router.message(RegistrationState.otp_code, F.text.len() != 6)
async def handle_invalid_otp_code(message: Message, state: FSMContext):
    await message.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ 6 –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.set_state(RegistrationState.otp_code)

@router.message(RegistrationState.otp_code, F.text.len() == 6, F.text.func(str.isdigit))
async def handle_otp_code(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    
    response = await context.otp_service.verify_otp(phone, message.text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP
    error_messages = {
        'OTP has expired. Please request a new one.': (RegistrationState.phone, '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥'),
        'OTP has already been used.': (RegistrationState.phone, '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥'),
        'Invalid OTP or phone number.': (RegistrationState.otp_code, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    }

    if 'detail' in response:
        state_target, error_msg = error_messages.get(response['detail'], (RegistrationState.phone, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞'))
        await message.reply(error_msg)
        await state.set_state(state_target)
        return

    # –ï—Å–ª–∏ OTP —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    if response.get('message') == 'OTP verified successfully':
        try:
            crud.create_user(
                db, tg_id=message.from_user.id, username=message.from_user.username,
                name=data['name'], phone=data['phone'], city=data['city']
            )
        except Exception as e:
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            await back_to_start(message, state)
            return

        await state.clear()
        await after_auth(message, state)
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')